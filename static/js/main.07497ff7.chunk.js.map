{"version":3,"sources":["reducers/moviesReducer.js","reducers/index.js","store.js","api/moviesApi.js","actions/movieActions.js","components/MoviesFilter.js","components/AsyncComponent.js","containters/MoviesContainer.js","components/MovieItem.js","App.js","serviceWorker.js","index.js"],"names":["initialState","movies","movie","title","loading","combineReducers","app","state","arguments","length","undefined","action","type","Object","objectSpread","payload","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","a","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","fetchMovies","params","fetch","concat","setMoviesLoading","MoviesFilter","handleTitleSearch","e","_this","props","getMovies","currentTarget","value","react_default","createElement","className","name","placeholder","this","onChange","Component","mapDispatchToProps","dispatch","returnEmpty","then","res","json","Error","Search","catch","err","connect","AsyncComponent","isLoading","loadComponent","componentProvider","setState","componentProps","Movies","lazyLoadMovieList","AsyncComponent_AsyncComponent","__webpack_require__","bind","module","MoviesList","components_MoviesFilter","MoviesContainer","MovieItem","loadMovieInfo","MovieCard","match","getMovieById","id","Link","to","App","BrowserRouter","basename","process","react_redux_es","Redirect","from","Route","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07497ff7.chunk.js","sourcesContent":["const initialState = {\r\n  movies: [],\r\n  movie: {},\r\n  title: '',\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'GET_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: action.payload,\r\n        title: action.title,\r\n        loading: false\r\n      };\r\n    case 'GET_MOVIE_BY_ID':\r\n      return {\r\n        ...state,\r\n        movie: action.payload,\r\n        loading: false\r\n      };\r\n    case 'MOVIES_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport moviesReducer from './moviesReducer';\r\n\r\nexport default combineReducers({\r\n  app: moviesReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nlet devTools =\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nif (process.env.NODE_ENV === 'prod' || process.env.NODE_ENV === 'production') {\r\n  devTools = a => a;\r\n}\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  compose(\r\n    applyMiddleware(ReduxThunk),\r\n    devTools\r\n  )\r\n);\r\n\r\nexport default store;\r\n","const apiKey = '4434a6dd';\r\n\r\nexport const fetchMovies = params => {\r\n  return fetch(`https://www.omdbapi.com/?apiKey=${apiKey}&${params}`);\r\n};\r\n","import { fetchMovies } from '../api/moviesApi';\r\n\r\nexport const getMovies = title => dispatch => {\r\n  const returnEmpty = () => {\r\n    dispatch({\r\n      type: 'GET_MOVIES',\r\n      payload: [],\r\n      title: title\r\n    });\r\n  };\r\n  if (title.length > 2) {\r\n    dispatch(setMoviesLoading());\r\n    fetchMovies('s=' + title)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const payload = !json.Error ? json.Search : [];\r\n        dispatch({\r\n          type: 'GET_MOVIES',\r\n          payload: payload,\r\n          title: title\r\n        });\r\n      })\r\n      .catch(err => {\r\n        returnEmpty();\r\n      });\r\n  } else {\r\n    returnEmpty();\r\n  }\r\n};\r\n\r\nexport const getMovieById = id => dispatch => {\r\n  dispatch(setMoviesLoading());\r\n  fetchMovies('i=' + id)\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      dispatch({\r\n        type: 'GET_MOVIE_BY_ID',\r\n        payload: json\r\n      });\r\n    })\r\n    .catch(err => {\r\n      dispatch({\r\n        type: 'GET_MOVIES',\r\n        payload: {}\r\n      });\r\n    });\r\n};\r\n\r\nexport const setMoviesLoading = () => {\r\n  return {\r\n    type: 'MOVIES_LOADING'\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMovies } from '../actions/movieActions';\r\n\r\nclass MoviesFilter extends Component {\r\n  handleTitleSearch = e => {\r\n    if (this.props.loading === true) {\r\n      return false;\r\n    }\r\n    this.props.getMovies(e.currentTarget.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"field\">\r\n        <div className=\"ui icon fluid input\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            placeholder=\"Search movies...\"\r\n            value={this.props.title}\r\n            onChange={this.handleTitleSearch}\r\n          />\r\n          <i className=\"search icon\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    title: state.app.title,\r\n    loading: state.app.loading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { getMovies };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MoviesFilter);\r\n","import React, { Component } from 'react';\r\n\r\nexport default class AsyncComponent extends Component {\r\n  state = { Component: null, isLoading: false };\r\n\r\n  componentDidMount() {\r\n    if (!this.state.Component && !this.state.isLoading) {\r\n      this.setState({ isLoading: true }, this.loadComponent);\r\n    }\r\n  }\r\n\r\n  loadComponent = () => {\r\n    return this.props.componentProvider().then(Component => {\r\n      this.setState({ Component, isLoading: false });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { Component } = this.state;\r\n    if (Component) {\r\n      return <Component {...this.props.componentProps} />;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport MoviesFilter from '../components/MoviesFilter';\r\nimport AsyncComponent from '../components/AsyncComponent';\r\n\r\nclass Movies extends Component {\r\n  lazyLoadMovieList = () => {\r\n    if (this.props.loading === true) {\r\n      return <div className=\"ui active loader\" />;\r\n    }\r\n\r\n    if (!this.props.movies.length) {\r\n      return <h3>No results ... </h3>;\r\n    }\r\n\r\n    return (\r\n      <AsyncComponent\r\n        componentProps={{ movies: this.props.movies }}\r\n        componentProvider={() =>\r\n          import('./MoviesList').then(module => module.MoviesList)\r\n        }\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"ui main text container\">\r\n        <form className=\"ui large form\">\r\n          <div className=\"ui segment\">\r\n            <MoviesFilter />\r\n          </div>\r\n        </form>\r\n        {this.lazyLoadMovieList()}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    movies: state.app.movies,\r\n    loading: state.app.loading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport const MoviesContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Movies);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { getMovieById } from '../actions/movieActions';\r\n\r\nimport AsyncComponent from './AsyncComponent';\r\n\r\nclass MovieItem extends Component {\r\n  componentDidMount() {\r\n    const { params } = this.props.match;\r\n    this.props.getMovieById(params.id);\r\n  }\r\n\r\n  loadMovieInfo = () => {\r\n    if (this.props.loading === true) {\r\n      return <div className=\"ui active loader\" />;\r\n    }\r\n    if (typeof this.props.movie.Error !== 'undefined') {\r\n      return <h3>{this.props.movie.Error}</h3>;\r\n    }\r\n\r\n    return (\r\n      <AsyncComponent\r\n        componentProps={{ movie: this.props.movie }}\r\n        componentProvider={() =>\r\n          import('./MovieCard').then(module => module.MovieCard)\r\n        }\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"movie-info\">\r\n        <Link to=\"/movies\" className=\"ui left labeled icon button\">\r\n          <i className=\"left arrow icon\" />\r\n          Back\r\n        </Link>\r\n        {this.loadMovieInfo()}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    movie: state.app.movie,\r\n    loading: state.app.loading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { getMovieById };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MovieItem);\r\n","import React, { Component } from 'react';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Redirect, Route } from 'react-router-dom';\n\nimport { MoviesContainer } from './containters/MoviesContainer';\nimport MovieItem from './components/MovieItem';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n          <Redirect from=\"/\" to=\"movies\" />\n          <Route exact path=\"/movies\" component={MoviesContainer} />\n          <Route exact path=\"/movies/:id\" component={MovieItem} />\n        </Provider>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}